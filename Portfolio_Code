import streamlit as st
import numpy as np
import pandas as pd
import yfinance as yf
from scipy.optimize import minimize

# Define assets
assets = st.sidebar.multiselect("Select Assets", ['AAPL', 'MSFT', 'GOOGL', 'TSLA'], default=['AAPL', 'MSFT'])

# Fetch data
data = yf.download(assets, start='2020-01-01', end='2023-01-01')['Adj Close']
returns = data.pct_change().dropna()

# Define optimization function
def objective(weights):
    return np.dot(weights.T, np.dot(returns.cov(), weights))

constraints = ({'type': 'eq', 'fun': lambda weights: np.sum(weights) - 1})
bounds = tuple((0, 1) for asset in assets)
initial_weights = len(assets) * [1. / len(assets)]

# Optimize portfolio
result = minimize(objective, initial_weights, method='SLSQP', bounds=bounds, constraints=constraints)
optimized_weights = result.x

# Display results
st.title('Investment Portfolio Optimization')
st.write('### Optimized Weights:')
for asset, weight in zip(assets, optimized_weights):
    st.write(f'{asset}: {weight:.2%}')

# Visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Plot the returns
fig, ax = plt.subplots()
returns.plot(ax=ax)
ax.set_title('Asset Returns')
st.pyplot(fig)
